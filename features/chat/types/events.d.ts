//Adapted from https://matrix.org/docs/spec/client_server/latest#events

export interface ChatEvent<Content = unknown> {
  /**
   * The fields in this object will vary depending on the type of event. When interacting with the REST API, this is the HTTP body.
   */
  content: Content;
  /**
   * The type of event. 
   * This SHOULD be namespaced following naming conventions e.g. 'com.example.subdomain.event.type'
   * MUST NOT exceed 255 bytes (including domain).
   */
   type: string;
}

export interface ChatMessageEvent extends ChatEvent<MessageContent> {
  type: "m.room.message";
  /**
   * The globally unique event identifier.
   * MUST NOT exceed 255 bytes.
   */
  event_id: string;
  /**
   * The ID of the room associated with this event. Will not be present on events that arrive through /sync, despite being required everywhere else.
   * MUST NOT exceed 255 bytes.
   */
  room_id: string;
  /**
   * Contains the fully-qualified ID of the user who sent this event.
   * Basically, this is the userId
   * MUST NOT exceed 255 bytes (including domain).
   */
  sender: string;
  /**
   * Timestamp in milliseconds on originating homeserver when this event was sent.
   * Useful to guarantee correct message order
   */
  origin_server_ts: number;
  /**
   * Contains optional extra information about the event
   */
  unsigned?: UnsignedData;
}

export interface UnsignedData {
  /**
   * The time in milliseconds that has elapsed since the event was sent. This field is generated by the local homeserver, and may be incorrect if the local time on at least one of the two servers is out of sync, which can cause the age to either be negative or greater than it actually is.
   */
  age: number;
  /**
   * The event that redacted this event, if any.
   */
  redacted_because?: ChatEvent;
  /**
   * The client-supplied transaction ID, if the client being given the event is the same one which sent it.
   */
  transactionId?:	string
}


